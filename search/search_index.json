{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Homie MQTT Convention \u00b6 The Homie convention strives to be a communication definition on top of MQTT between IoT devices and controlling entities. MQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. MQTT supports easy and unrestricted message-based communication. However, MQTT doesn't define the structure and content of these messages and their relation. An IoT device publishes data and provides interaction possibilities but a controlling entity will need to be specifically configured to be able to interface with the device. The Homie convention defines a standardized way of how IoT devices and services announce themselves and their data on the communication channel. The Homie convention is thereby a crucial aspect in the support of automatic discovery, configuration and usage of devices and services over the MQTT protocol. MQTT Restrictions \u00b6 Homie communicates through MQTT and is hence based on the basic principles of MQTT topic publication and subscription. Topic IDs \u00b6 An MQTT topic consists of one or more topic levels, separated by the slash character ( / ). A topic level ID MAY contain lowercase letters from a to z , numbers from 0 to 9 as well as the hyphen character ( - ). A topic level ID MUST NOT start or end with a hyphen ( - ). The special character $ is used and reserved for Homie attributes . The underscore ( _ ) is used and reserved for Homie node arrays . Payload \u00b6 Every MQTT message payload MUST be sent as string. If a value is of a numeric data type, it MUST be converted to string. Booleans MUST be converted to \"true\" or \"false\". All values MUST be encoded as UTF-8 strings. QoS and retained messages \u00b6 The nature of the Homie convention makes it safe about duplicate messages, so the recommended QoS for reliability is QoS 1 . All messages MUST be sent as retained , UNLESS stated otherwise.","title":"The Homie MQTT Convention"},{"location":"#the-homie-mqtt-convention","text":"The Homie convention strives to be a communication definition on top of MQTT between IoT devices and controlling entities. MQTT is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport. MQTT supports easy and unrestricted message-based communication. However, MQTT doesn't define the structure and content of these messages and their relation. An IoT device publishes data and provides interaction possibilities but a controlling entity will need to be specifically configured to be able to interface with the device. The Homie convention defines a standardized way of how IoT devices and services announce themselves and their data on the communication channel. The Homie convention is thereby a crucial aspect in the support of automatic discovery, configuration and usage of devices and services over the MQTT protocol.","title":"The Homie MQTT Convention"},{"location":"#mqtt-restrictions","text":"Homie communicates through MQTT and is hence based on the basic principles of MQTT topic publication and subscription.","title":"MQTT Restrictions"},{"location":"#topic-ids","text":"An MQTT topic consists of one or more topic levels, separated by the slash character ( / ). A topic level ID MAY contain lowercase letters from a to z , numbers from 0 to 9 as well as the hyphen character ( - ). A topic level ID MUST NOT start or end with a hyphen ( - ). The special character $ is used and reserved for Homie attributes . The underscore ( _ ) is used and reserved for Homie node arrays .","title":"Topic IDs"},{"location":"#payload","text":"Every MQTT message payload MUST be sent as string. If a value is of a numeric data type, it MUST be converted to string. Booleans MUST be converted to \"true\" or \"false\". All values MUST be encoded as UTF-8 strings.","title":"Payload"},{"location":"#qos-and-retained-messages","text":"The nature of the Homie convention makes it safe about duplicate messages, so the recommended QoS for reliability is QoS 1 . All messages MUST be sent as retained , UNLESS stated otherwise.","title":"QoS and retained messages"},{"location":"spec-core-latest/","text":"Core Specification (latest) \u00b6 Topology \u00b6 Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Properties can be retained . A property is retained by default. A non-retained property would be useful for momentary events (door bell pressed). A combination of those flags compiles into this list: retained + non-settable : The node publishes a property state (temperature sensor) retained + settable : The node publishes a property state, and can receive commands for the property (by controller or other party) (lamp power) non-retained + non-settable : The node publishes momentary events (door bell pressed) non-retained + settable : The node publishes momentary events, and can receive commands for the property (by controller or other party) (brew coffee) Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute. Base Topic \u00b6 The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers. Devices \u00b6 homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format . Device Attributes \u00b6 homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\" Device Behavior \u00b6 The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong. Device Statistics \u00b6 homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\" Nodes \u00b6 homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format . Node Attributes \u00b6 homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\" Properties \u00b6 homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\" Property Attributes \u00b6 homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $retained Device \u2192 Controller Specifies whether the property is retained ( true ) or non-retained ( false ). Publishing to a non-retained property topic MUST always happen with the MQTT 'retain' flag off. true or false Yes No ( true ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes No for $datatype string , integer , float , boolean . Yes for enum , color For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"true\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\" Arrays \u00b6 A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.). Broadcast Channel \u00b6 Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention. ---- \u00b6","title":"Core Specification (latest)"},{"location":"spec-core-latest/#core-specification-latest","text":"","title":"Core Specification (latest)"},{"location":"spec-core-latest/#topology","text":"Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Properties can be retained . A property is retained by default. A non-retained property would be useful for momentary events (door bell pressed). A combination of those flags compiles into this list: retained + non-settable : The node publishes a property state (temperature sensor) retained + settable : The node publishes a property state, and can receive commands for the property (by controller or other party) (lamp power) non-retained + non-settable : The node publishes momentary events (door bell pressed) non-retained + settable : The node publishes momentary events, and can receive commands for the property (by controller or other party) (brew coffee) Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute.","title":"Topology"},{"location":"spec-core-latest/#base-topic","text":"The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers.","title":"Base Topic"},{"location":"spec-core-latest/#devices","text":"homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format .","title":"Devices"},{"location":"spec-core-latest/#device-attributes","text":"homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\"","title":"Device Attributes"},{"location":"spec-core-latest/#device-behavior","text":"The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong.","title":"Device Behavior"},{"location":"spec-core-latest/#device-statistics","text":"homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\"","title":"Device Statistics"},{"location":"spec-core-latest/#nodes","text":"homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format .","title":"Nodes"},{"location":"spec-core-latest/#node-attributes","text":"homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\"","title":"Node Attributes"},{"location":"spec-core-latest/#properties","text":"homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\"","title":"Properties"},{"location":"spec-core-latest/#property-attributes","text":"homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $retained Device \u2192 Controller Specifies whether the property is retained ( true ) or non-retained ( false ). Publishing to a non-retained property topic MUST always happen with the MQTT 'retain' flag off. true or false Yes No ( true ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes No for $datatype string , integer , float , boolean . Yes for enum , color For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"true\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\"","title":"Property Attributes"},{"location":"spec-core-latest/#arrays","text":"A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.).","title":"Arrays"},{"location":"spec-core-latest/#broadcast-channel","text":"Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention.","title":"Broadcast Channel"},{"location":"spec-core-latest/#-","text":"","title":"----"},{"location":"spec-core-v1_5_0/","text":"Core Specification (v1.5.0) \u00b6 Convention \u00b6 Homie devices communicate through MQTT. To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following lines will be devices/ . You can customize this base topic if it fits better to your needs. devices / device ID : this is the base topic name. Each device must have a unique device ID. This ID MAY be composed of lowercase letters from a to z , numbers from 0 to 9 , and it MAY contain - , but MUST NOT start or end with a - . Device properties \u00b6 devices / device ID / $ device property : a property starting with a $ at the third level of the path is related to the device. The property MUST be one of these: Property Direction Description Retained $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT) Yes $name Device \u2192 Controller Friendly name of the device Yes $localip Device \u2192 Controller IP of the device on the local network Yes $uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes $signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes $fwname Device \u2192 Controller Name of the firmware running on the device. This name MAY be composed of lowercase letters from a to z , numbers from 0 to 9 , and it MAY contain - , but MUST NOT start or end with a - Yes $fwversion Device \u2192 Controller Version of the firmware running on the device Yes $nodes Device \u2192 Controller Nodes the device has, with format id:type separated by a , if there are multiple nodes Yes $ota Controller \u2192 Device Latest OTA version available for the device Yes or No, depending of your implementation $ota/+ Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of `$ota` for anything related to your specific OTA implementation. Yes or No, depending of your implementation $reset Controller \u2192 Device true when the controller wants the device to reset its configuration. false otherwise. When the device receives a true , it should replace the retained message with a false before resetting Yes For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: devices/686f6d6965/$online \u2192 true devices/686f6d6965/$name \u2192 Bedroom temperature sensor devices/686f6d6965/$localip \u2192 192.168.0.10 devices/686f6d6965/$signal \u2192 72 devices/686f6d6965/$fwname \u2192 1.0.0 devices/686f6d6965/$fwversion \u2192 1.0.0 devices/686f6d6965/$nodes \u2192 temperature:temperature,humidity:humidity And it would receive: devices/686f6d6965/$ota \u2190 1.0.1 devices/686f6d6965/$reset \u2190 false At this point, your device would understand there is an OTA update available, as $ota is different from $version . Node properties \u00b6 devices / device ID / node ID / property : node ID is the ID of the node, as defined in the $nodes device property. property is the property of the node that is getting updated. For example, our 686f6d6965 above would send: devices/686f6d6965/temperature/temperature \u2192 12.07 devices/686f6d6965/humidity/humidity \u2192 79 devices / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smarlight to turn on, but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, an homielight device exposing a light node would subscribe to devices/homielight/light/on/set and it would receive: devices/homielight/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. devices/homielight/light/on \u2192 true Any other topic is not part of the Homie convention.","title":"Core Specification (v1.5.0)"},{"location":"spec-core-v1_5_0/#core-specification-v150","text":"","title":"Core Specification (v1.5.0)"},{"location":"spec-core-v1_5_0/#convention","text":"Homie devices communicate through MQTT. To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following lines will be devices/ . You can customize this base topic if it fits better to your needs. devices / device ID : this is the base topic name. Each device must have a unique device ID. This ID MAY be composed of lowercase letters from a to z , numbers from 0 to 9 , and it MAY contain - , but MUST NOT start or end with a - .","title":"Convention"},{"location":"spec-core-v1_5_0/#device-properties","text":"devices / device ID / $ device property : a property starting with a $ at the third level of the path is related to the device. The property MUST be one of these: Property Direction Description Retained $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT) Yes $name Device \u2192 Controller Friendly name of the device Yes $localip Device \u2192 Controller IP of the device on the local network Yes $uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes $signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes $fwname Device \u2192 Controller Name of the firmware running on the device. This name MAY be composed of lowercase letters from a to z , numbers from 0 to 9 , and it MAY contain - , but MUST NOT start or end with a - Yes $fwversion Device \u2192 Controller Version of the firmware running on the device Yes $nodes Device \u2192 Controller Nodes the device has, with format id:type separated by a , if there are multiple nodes Yes $ota Controller \u2192 Device Latest OTA version available for the device Yes or No, depending of your implementation $ota/+ Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of `$ota` for anything related to your specific OTA implementation. Yes or No, depending of your implementation $reset Controller \u2192 Device true when the controller wants the device to reset its configuration. false otherwise. When the device receives a true , it should replace the retained message with a false before resetting Yes For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: devices/686f6d6965/$online \u2192 true devices/686f6d6965/$name \u2192 Bedroom temperature sensor devices/686f6d6965/$localip \u2192 192.168.0.10 devices/686f6d6965/$signal \u2192 72 devices/686f6d6965/$fwname \u2192 1.0.0 devices/686f6d6965/$fwversion \u2192 1.0.0 devices/686f6d6965/$nodes \u2192 temperature:temperature,humidity:humidity And it would receive: devices/686f6d6965/$ota \u2190 1.0.1 devices/686f6d6965/$reset \u2190 false At this point, your device would understand there is an OTA update available, as $ota is different from $version .","title":"Device properties"},{"location":"spec-core-v1_5_0/#node-properties","text":"devices / device ID / node ID / property : node ID is the ID of the node, as defined in the $nodes device property. property is the property of the node that is getting updated. For example, our 686f6d6965 above would send: devices/686f6d6965/temperature/temperature \u2192 12.07 devices/686f6d6965/humidity/humidity \u2192 79 devices / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smarlight to turn on, but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, an homielight device exposing a light node would subscribe to devices/homielight/light/on/set and it would receive: devices/homielight/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. devices/homielight/light/on \u2192 true Any other topic is not part of the Homie convention.","title":"Node properties"},{"location":"spec-core-v2_0_0/","text":"Core Specification (v2.0.0) \u00b6 Convention \u00b6 To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following convention will be homie/ . You can however choose whatever base topic you want. homie / device ID : this is the base topic of a device. Each device must have an unique device ID which adhere to the ID format . Device properties \u00b6 homie / device ID / $ device property : a topic starting with a $ after the base topic of a device represents a device property. A device property MUST be one of these: Property Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT). When sending the device is online, this message must be sent last, to indicate every other required messages are sent and the device is ready Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes No, this is not applicable to an Ethernet connected device for example $stats/interval Device \u2192 Controller Interval in seconds at which the $stats/uptime and $stats/signal are refreshed Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $fw/checksum Device \u2192 Controller MD5 checksum of the firmware running on the device Yes No, depending of your implementation $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: homie/686f6d6965/$online \u2192 true homie/686f6d6965/$name \u2192 Bedroom temperature sensor homie/686f6d6965/$localip \u2192 192.168.0.10 homie/686f6d6965/$signal \u2192 72 homie/686f6d6965/$fw/name \u2192 1.0.0 homie/686f6d6965/$fw/version \u2192 1.0.0 Node properties \u00b6 homie / device ID / node ID / property : node ID is the ID of the node, which must be unique on a per-device basis, and which adhere to the ID format . property is the property of the node that is getting updated, which must be unique on a per-node basis, and which adhere to the ID format . Properties starting with a $ are special properties. It must be one of the following: Property Direction Description Retained Required $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. For ranges, define the range after the id , within [] and separated by a - . For settable properties, add :settable to the id Yes Yes For example, our 686f6d6965 above would send: homie/686f6d6965/temperature/$type \u2192 temperature homie/686f6d6965/temperature/$properties \u2192 degrees,unit homie/686f6d6965/temperature/unit \u2192 c homie/686f6d6965/temperature/degrees \u2192 12.07 homie/686f6d6965/humidity/$type \u2192 humidity homie/686f6d6965/humidity/$properties \u2192 percentage homie/686f6d6965/humidity/percentage \u2192 79 A LED strip would look like this. Note that the topic for a range properties is the name of the property followed by a _ and the index getting updated: homie/ledstrip-device/ledstrip/$type \u2192 ledstrip homie/ledstrip-device/ledstrip/$properties \u2192 led[1-3]:settable homie/ledstrip-device/ledstrip/led_1 \u2192 on homie/ledstrip-device/ledstrip/led_2 \u2192 off homie/ledstrip-device/ledstrip/led_3 \u2192 on homie / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/on/set and it would receive: homie/kitchen-light/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. homie/kitchen-light/light/on \u2192 true Broadcast channel \u00b6 Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie/$broadcast/alert \u2190 Intruder detected Any other topic is not part of the Homie convention.","title":"Core Specification (v2.0.0)"},{"location":"spec-core-v2_0_0/#core-specification-v200","text":"","title":"Core Specification (v2.0.0)"},{"location":"spec-core-v2_0_0/#convention","text":"To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following convention will be homie/ . You can however choose whatever base topic you want. homie / device ID : this is the base topic of a device. Each device must have an unique device ID which adhere to the ID format .","title":"Convention"},{"location":"spec-core-v2_0_0/#device-properties","text":"homie / device ID / $ device property : a topic starting with a $ after the base topic of a device represents a device property. A device property MUST be one of these: Property Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT). When sending the device is online, this message must be sent last, to indicate every other required messages are sent and the device is ready Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes No, this is not applicable to an Ethernet connected device for example $stats/interval Device \u2192 Controller Interval in seconds at which the $stats/uptime and $stats/signal are refreshed Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $fw/checksum Device \u2192 Controller MD5 checksum of the firmware running on the device Yes No, depending of your implementation $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: homie/686f6d6965/$online \u2192 true homie/686f6d6965/$name \u2192 Bedroom temperature sensor homie/686f6d6965/$localip \u2192 192.168.0.10 homie/686f6d6965/$signal \u2192 72 homie/686f6d6965/$fw/name \u2192 1.0.0 homie/686f6d6965/$fw/version \u2192 1.0.0","title":"Device properties"},{"location":"spec-core-v2_0_0/#node-properties","text":"homie / device ID / node ID / property : node ID is the ID of the node, which must be unique on a per-device basis, and which adhere to the ID format . property is the property of the node that is getting updated, which must be unique on a per-node basis, and which adhere to the ID format . Properties starting with a $ are special properties. It must be one of the following: Property Direction Description Retained Required $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. For ranges, define the range after the id , within [] and separated by a - . For settable properties, add :settable to the id Yes Yes For example, our 686f6d6965 above would send: homie/686f6d6965/temperature/$type \u2192 temperature homie/686f6d6965/temperature/$properties \u2192 degrees,unit homie/686f6d6965/temperature/unit \u2192 c homie/686f6d6965/temperature/degrees \u2192 12.07 homie/686f6d6965/humidity/$type \u2192 humidity homie/686f6d6965/humidity/$properties \u2192 percentage homie/686f6d6965/humidity/percentage \u2192 79 A LED strip would look like this. Note that the topic for a range properties is the name of the property followed by a _ and the index getting updated: homie/ledstrip-device/ledstrip/$type \u2192 ledstrip homie/ledstrip-device/ledstrip/$properties \u2192 led[1-3]:settable homie/ledstrip-device/ledstrip/led_1 \u2192 on homie/ledstrip-device/ledstrip/led_2 \u2192 off homie/ledstrip-device/ledstrip/led_3 \u2192 on homie / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/on/set and it would receive: homie/kitchen-light/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. homie/kitchen-light/light/on \u2192 true","title":"Node properties"},{"location":"spec-core-v2_0_0/#broadcast-channel","text":"Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie/$broadcast/alert \u2190 Intruder detected Any other topic is not part of the Homie convention.","title":"Broadcast channel"},{"location":"spec-core-v2_0_1/","text":"Core Specification (v2.0.1) \u00b6 Convention \u00b6 To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following convention will be homie/ . You can however choose whatever base topic you want. homie / device ID : this is the base topic of a device. Each device must have an unique device ID which adhere to the ID format . Device properties \u00b6 homie / device ID / $ device property : a topic starting with a $ after the base topic of a device represents a device property. A device property MUST be one of these: Property Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT). When sending the device is online, this message must be sent last, to indicate every other required messages are sent and the device is ready Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes No, this is not applicable to an Ethernet connected device for example $stats/interval Device \u2192 Controller Interval in seconds at which the $stats/uptime and $stats/signal are refreshed Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $fw/checksum Device \u2192 Controller MD5 checksum of the firmware running on the device Yes No, depending of your implementation $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. Yes Yes For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: homie/686f6d6965/$online \u2192 true homie/686f6d6965/$name \u2192 Bedroom temperature sensor homie/686f6d6965/$localip \u2192 192.168.0.10 homie/686f6d6965/$signal \u2192 72 homie/686f6d6965/$fw/name \u2192 1.0.0 homie/686f6d6965/$fw/version \u2192 1.0.0 Node properties \u00b6 homie / device ID / node ID / property : node ID is the ID of the node, which must be unique on a per-device basis, and which adhere to the ID format . property is the property of the node that is getting updated, which must be unique on a per-node basis, and which adhere to the ID format . Properties starting with a $ are special properties. It must be one of the following: Property Direction Description Retained Required $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. For ranges, define the range after the id , within [] and separated by a - . For settable properties, add :settable to the id Yes Yes For example, our 686f6d6965 above would send: homie/686f6d6965/temperature/$type \u2192 temperature homie/686f6d6965/temperature/$properties \u2192 degrees,unit homie/686f6d6965/temperature/unit \u2192 c homie/686f6d6965/temperature/degrees \u2192 12.07 homie/686f6d6965/humidity/$type \u2192 humidity homie/686f6d6965/humidity/$properties \u2192 percentage homie/686f6d6965/humidity/percentage \u2192 79 A LED strip would look like this. Note that the topic for a range properties is the name of the property followed by a _ and the index getting updated: homie/ledstrip-device/ledstrip/$type \u2192 ledstrip homie/ledstrip-device/ledstrip/$properties \u2192 led[1-3]:settable homie/ledstrip-device/ledstrip/led_1 \u2192 on homie/ledstrip-device/ledstrip/led_2 \u2192 off homie/ledstrip-device/ledstrip/led_3 \u2192 on homie / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/on/set and it would receive: homie/kitchen-light/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. homie/kitchen-light/light/on \u2192 true Broadcast channel \u00b6 Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie/$broadcast/alert \u2190 Intruder detected Any other topic is not part of the Homie convention.","title":"Core Specification (v2.0.1)"},{"location":"spec-core-v2_0_1/#core-specification-v201","text":"","title":"Core Specification (v2.0.1)"},{"location":"spec-core-v2_0_1/#convention","text":"To efficiently parse messages, Homie defines a few rules related to topic names. The base topic you will see in the following convention will be homie/ . You can however choose whatever base topic you want. homie / device ID : this is the base topic of a device. Each device must have an unique device ID which adhere to the ID format .","title":"Convention"},{"location":"spec-core-v2_0_1/#device-properties","text":"homie / device ID / $ device property : a topic starting with a $ after the base topic of a device represents a device property. A device property MUST be one of these: Property Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $online Device \u2192 Controller true when the device is online, false when the device is offline (through LWT). When sending the device is online, this message must be sent last, to indicate every other required messages are sent and the device is ready Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Integer representing the Wi-Fi signal quality in percentage if applicable Yes No, this is not applicable to an Ethernet connected device for example $stats/interval Device \u2192 Controller Interval in seconds at which the $stats/uptime and $stats/signal are refreshed Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $fw/checksum Device \u2192 Controller MD5 checksum of the firmware running on the device Yes No, depending of your implementation $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. Yes Yes For example, a device with an ID of 686f6d6965 with a temperature and an humidity sensor would send: homie/686f6d6965/$online \u2192 true homie/686f6d6965/$name \u2192 Bedroom temperature sensor homie/686f6d6965/$localip \u2192 192.168.0.10 homie/686f6d6965/$signal \u2192 72 homie/686f6d6965/$fw/name \u2192 1.0.0 homie/686f6d6965/$fw/version \u2192 1.0.0","title":"Device properties"},{"location":"spec-core-v2_0_1/#node-properties","text":"homie / device ID / node ID / property : node ID is the ID of the node, which must be unique on a per-device basis, and which adhere to the ID format . property is the property of the node that is getting updated, which must be unique on a per-node basis, and which adhere to the ID format . Properties starting with a $ are special properties. It must be one of the following: Property Direction Description Retained Required $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. For ranges, define the range after the id , within [] and separated by a - . For settable properties, add :settable to the id Yes Yes For example, our 686f6d6965 above would send: homie/686f6d6965/temperature/$type \u2192 temperature homie/686f6d6965/temperature/$properties \u2192 degrees,unit homie/686f6d6965/temperature/unit \u2192 c homie/686f6d6965/temperature/degrees \u2192 12.07 homie/686f6d6965/humidity/$type \u2192 humidity homie/686f6d6965/humidity/$properties \u2192 percentage homie/686f6d6965/humidity/percentage \u2192 79 A LED strip would look like this. Note that the topic for a range properties is the name of the property followed by a _ and the index getting updated: homie/ledstrip-device/ledstrip/$type \u2192 ledstrip homie/ledstrip-device/ledstrip/$properties \u2192 led[1-3]:settable homie/ledstrip-device/ledstrip/led_1 \u2192 on homie/ledstrip-device/ledstrip/led_2 \u2192 off homie/ledstrip-device/ledstrip/led_3 \u2192 on homie / device ID / node ID / property / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put it's on state to true . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/on/set and it would receive: homie/kitchen-light/light/on/set \u2190 true The device would then turn on the light, and update its on state. This provides pessimistic feedback, which is important for home automation. homie/kitchen-light/light/on \u2192 true","title":"Node properties"},{"location":"spec-core-v2_0_1/#broadcast-channel","text":"Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie/$broadcast/alert \u2190 Intruder detected Any other topic is not part of the Homie convention.","title":"Broadcast channel"},{"location":"spec-core-v3_0_0/","text":"Core Specification (v3.0.0) \u00b6 Topology \u00b6 Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute. Base Topic \u00b6 The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers. Devices \u00b6 homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format . Device Attributes \u00b6 homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\" Device Behavior \u00b6 The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong. Device Statistics \u00b6 homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\" Nodes \u00b6 homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format . Node Attributes \u00b6 homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\" Properties \u00b6 homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\" Property Attributes \u00b6 homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum regex:pattern to provide a regex that can be used to match the value. e.g. regex:[A-Z][0-9]+ . Valid for datatype string rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes Depends on $datatype For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"on\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\" Arrays \u00b6 A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.). Broadcast Channel \u00b6 Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention.","title":"Core Specification (v3.0.0)"},{"location":"spec-core-v3_0_0/#core-specification-v300","text":"","title":"Core Specification (v3.0.0)"},{"location":"spec-core-v3_0_0/#topology","text":"Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute.","title":"Topology"},{"location":"spec-core-v3_0_0/#base-topic","text":"The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers.","title":"Base Topic"},{"location":"spec-core-v3_0_0/#devices","text":"homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format .","title":"Devices"},{"location":"spec-core-v3_0_0/#device-attributes","text":"homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\"","title":"Device Attributes"},{"location":"spec-core-v3_0_0/#device-behavior","text":"The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong.","title":"Device Behavior"},{"location":"spec-core-v3_0_0/#device-statistics","text":"homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\"","title":"Device Statistics"},{"location":"spec-core-v3_0_0/#nodes","text":"homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format .","title":"Nodes"},{"location":"spec-core-v3_0_0/#node-attributes","text":"homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\"","title":"Node Attributes"},{"location":"spec-core-v3_0_0/#properties","text":"homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\"","title":"Properties"},{"location":"spec-core-v3_0_0/#property-attributes","text":"homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum regex:pattern to provide a regex that can be used to match the value. e.g. regex:[A-Z][0-9]+ . Valid for datatype string rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes Depends on $datatype For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"on\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\"","title":"Property Attributes"},{"location":"spec-core-v3_0_0/#arrays","text":"A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.).","title":"Arrays"},{"location":"spec-core-v3_0_0/#broadcast-channel","text":"Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention.","title":"Broadcast Channel"},{"location":"spec-core-v3_0_1/","text":"Core Specification (v3.0.1) \u00b6 Topology \u00b6 Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Properties can be retained . A property is retained by default. A non-retained property would be useful for momentary events (door bell pressed). A combination of those flags compiles into this list: retained + non-settable : The node publishes a property state (temperature sensor) retained + settable : The node publishes a property state, and can receive commands for the property (by controller or other party) (lamp power) non-retained + non-settable : The node publishes momentary events (door bell pressed) non-retained + settable : The node publishes momentary events, and can receive commands for the property (by controller or other party) (brew coffee) Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute. Base Topic \u00b6 The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers. Devices \u00b6 homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format . Device Attributes \u00b6 homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\" Device Behavior \u00b6 The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong. Device Statistics \u00b6 homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\" Nodes \u00b6 homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format . Node Attributes \u00b6 homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\" Properties \u00b6 homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\" Property Attributes \u00b6 homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $retained Device \u2192 Controller Specifies whether the property is retained ( true ) or non-retained ( false ). Publishing to a non-retained property topic MUST always happen with the MQTT 'retain' flag off. true or false Yes No ( true ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes No for $datatype string , integer , float , boolean . Yes for enum , color For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"true\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\" Arrays \u00b6 A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.). Broadcast Channel \u00b6 Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention. ---- \u00b6","title":"Core Specification (v3.0.1)"},{"location":"spec-core-v3_0_1/#core-specification-v301","text":"","title":"Core Specification (v3.0.1)"},{"location":"spec-core-v3_0_1/#topology","text":"Devices: An instance of a physical piece of hardware is called a device . For example, a car, an Arduino/ESP8266 or a coffee machine. Nodes: A device can expose multiple nodes . Nodes are independent or logically separable parts of a device. For example, a car might expose a wheels node, an engine node and a lights node. Nodes can be arrays . For example, instead of creating two lights node to control front lights and back lights independently, we can set the lights node to be an array with two elements. Properties: A node can have multiple properties . Properties represent basic characteristics of the node/device, often given as numbers or finite states. For example the wheels node might expose an angle property. The engine node might expose a speed , direction and temperature property. The lights node might expose an intensity and a color property. Properties can be settable . For example, you don't want your temperature property to be settable in case of a temperature sensor (like the car example), but to be settable in case of a thermostat. Properties can be retained . A property is retained by default. A non-retained property would be useful for momentary events (door bell pressed). A combination of those flags compiles into this list: retained + non-settable : The node publishes a property state (temperature sensor) retained + settable : The node publishes a property state, and can receive commands for the property (by controller or other party) (lamp power) non-retained + non-settable : The node publishes momentary events (door bell pressed) non-retained + settable : The node publishes momentary events, and can receive commands for the property (by controller or other party) (brew coffee) Attributes: Devices, nodes and properties have specific attributes characterizing them. Attributes are represented by topic identifier starting with $ . The precise definition of attributes is important for the automatic discovery of devices following the Homie convention. Examples: A device might have an IP attribute, a node will have a name attribute, and a property will have a unit attribute.","title":"Topology"},{"location":"spec-core-v3_0_1/#base-topic","text":"The base topic you will see in the following convention will be homie/ . If this base topic does not suit your needs (in case of, e.g., a public broker), you can choose another. Be aware, that only the default base topic homie/ is eligible for automatic discovery by third party controllers.","title":"Base Topic"},{"location":"spec-core-v3_0_1/#devices","text":"homie / device ID : this is the base topic of a device. Each device must have a unique device ID which adhere to the ID format .","title":"Devices"},{"location":"spec-core-v3_0_1/#device-attributes","text":"homie / device ID / $device-attribute : When the MQTT connection to the broker is established or re-established, the device MUST send its attributes to the broker immediately. Topic Direction Description Retained Required $homie Device \u2192 Controller Version of the Homie convention the device conforms to Yes Yes $name Device \u2192 Controller Friendly name of the device Yes Yes $state Device \u2192 Controller See Device behavior Yes Yes $localip Device \u2192 Controller IP of the device on the local network Yes Yes $mac Device \u2192 Controller Mac address of the device network interface. The format MUST be of the type A1:B2:C3:D4:E5:F6 Yes Yes $fw/name Device \u2192 Controller Name of the firmware running on the device. Allowed characters are the same as the device ID Yes Yes $fw/version Device \u2192 Controller Version of the firmware running on the device Yes Yes $nodes Device \u2192 Controller Nodes the device exposes, with format id separated by a , if there are multiple nodes. To make a node an array, append [] to the ID. Yes Yes $implementation Device \u2192 Controller An identifier for the Homie implementation (example esp8266 ) Yes Yes $implementation/# Controller \u2192 Device or Device \u2192 Controller You can use any subtopics of $implementation for anything related to your specific Homie implementation. Yes or No, depending of your implementation No $stats Device \u2192 Controller Specify all optional stats that the device will announce, with format stats separated by a , if there are multiple stats. See next section for an example Yes Yes $stats/interval Device \u2192 Controller Interval in seconds at which the device refreshes its $stats/+ : See next section for details about statistical attributes Yes Yes For example, a device with an ID of super-car that comprises off a wheels , engine and a lights node would send: homie / super - car / $homie \u2192 \"2.1.0\" homie / super - car / $name \u2192 \"Super car\" homie / super - car / $localip \u2192 \"192.168.0.10\" homie / super - car / $mac \u2192 \"DE:AD:BE:EF:FE:ED\" homie / super - car / $fw / name \u2192 \"weatherstation-firmware\" homie / super - car / $fw / version \u2192 \"1.0.0\" homie / super - car / $nodes \u2192 \"wheels,engine,lights[]\" homie / super - car / $implementation \u2192 \"esp8266\" homie / super - car / $stats / interval \u2192 \"60\" homie / super - car / $state \u2192 \"ready\"","title":"Device Attributes"},{"location":"spec-core-v3_0_1/#device-behavior","text":"The $state device attribute represents, as the name suggests, the current state of the device. There are 6 different states: init : this is the state the device is in when it is connected to the MQTT broker, but has not yet sent all Homie messages and is not yet ready to operate. This is the first message that must that must be sent. ready : this is the state the device is in when it is connected to the MQTT broker, has sent all Homie messages and is ready to operate. You have to send this message after all other announcements message have been sent. disconnected : this is the state the device is in when it is cleanly disconnected from the MQTT broker. You must send this message before cleanly disconnecting. sleeping : this is the state the device is in when the device is sleeping. You have to send this message before sleeping. lost : this is the state the device is in when the device has been \"badly\" disconnected. You must define this message as LWT. alert : this is the state the device is when connected to the MQTT broker, but something wrong is happening. E.g. a sensor is not providing data and needs human intervention. You have to send this message when something is wrong.","title":"Device Behavior"},{"location":"spec-core-v3_0_1/#device-statistics","text":"homie / device ID / $stats / $device-statistic-attribute : The $stats/ hierarchy allows to send device attributes that change over time. The device MUST send them every $stats/interval seconds. Topic Direction Description Retained Required $stats/uptime Device \u2192 Controller Time elapsed in seconds since the boot of the device Yes Yes $stats/signal Device \u2192 Controller Signal strength in % Yes No $stats/cputemp Device \u2192 Controller CPU Temperature in \u00b0C Yes No $stats/cpuload Device \u2192 Controller CPU Load in %. Average of last $interval including all CPUs Yes No $stats/battery Device \u2192 Controller Battery level in % Yes No $stats/freeheap Device \u2192 Controller Free heap in bytes Yes No $stats/supply Device \u2192 Controller Supply Voltage in V Yes No For example, our super-car device with $stats/interval value \"60\" is supposed to send its current values every 60 seconds: homie / super - car / $stats \u2192 \"uptime,cputemp,signal,battery\" homie / super - car / $stats / uptime \u2192 \"120\" homie / super - car / $stats / cputemp \u2192 \"48\" homie / super - car / $stats / signal \u2192 \"24\" homie / super - car / $stats / battery \u2192 \"80\"","title":"Device Statistics"},{"location":"spec-core-v3_0_1/#nodes","text":"homie / device ID / node ID : this is the base topic of a node. Each node must have a unique node ID on a per-device basis which adhere to the ID format .","title":"Nodes"},{"location":"spec-core-v3_0_1/#node-attributes","text":"homie / device ID / node ID / $node-attribute : A node attribute MUST be one of these: Topic Direction Description Retained Required $name Device \u2192 Controller Friendly name of the Node Yes Yes $type Device \u2192 Controller Type of the node Yes Yes $properties Device \u2192 Controller Properties the node exposes, with format id separated by a , if there are multiple nodes. Yes Yes $array Device \u2192 Controller Range separated by a - . e.g. 0-2 for an array with the indexes 0 , 1 and 2 Yes Yes, if the node is an array For example, our engine node would send: homie / super - car / engine / $name \u2192 \"Car engine\" homie / super - car / engine / $type \u2192 \"V8\" homie / super - car / engine / $properties \u2192 \"speed,direction,temperature\"","title":"Node Attributes"},{"location":"spec-core-v3_0_1/#properties","text":"homie / device ID / node ID / property ID : this is the base topic of a property. Each property must have a unique property ID on a per-node basis which adhere to the ID format . A property value (e.g. a sensor reading) is directly published to the property topic, e.g.: java homie/super-car/engine/temperature \u2192 \"21.5\"","title":"Properties"},{"location":"spec-core-v3_0_1/#property-attributes","text":"homie / device ID / node ID / property ID / $property-attribute : A property attribute MUST be one of these: Topic Direction Description Valid values Retained Required (Default) $name Device \u2192 Controller Friendly name of the property. Any String Yes No (\"\") $settable Device \u2192 Controller Specifies whether the property is settable ( true ) or readonly ( false ) true or false Yes No ( false ) $retained Device \u2192 Controller Specifies whether the property is retained ( true ) or non-retained ( false ). Publishing to a non-retained property topic MUST always happen with the MQTT 'retain' flag off. true or false Yes No ( true ) $unit Device \u2192 Controller A string containing the unit of this property. You are not limited to the recommended values, although they are the only well known ones that will have to be recognized by any Homie consumer. Recommended: \u00b0C Degree Celsius \u00b0F Degree Fahrenheit \u00b0 Degree L Liter gal Galon V Volts W Watt A Ampere % Percent m Meter ft Feet Pa Pascal psi PSI # Count or Amount Yes No (\"\") $datatype Device \u2192 Controller Describes the format of data. integer , float , boolean , string , enum , color Yes No ( string ) $format Device \u2192 Controller Describes what are valid values for this property. from:to Describes a range of values e.g. 10:15 . Valid for datatypes integer , float value,value,value for enumerating all valid values. Escape , by using ,, . e.g. A,B,C or ON,OFF,PAUSE . Valid for datatypes enum rgb to provide colors in RGB format e.g. 255,255,0 for yellow. hsv to provide colors in HSV format e.g. 60,100,100 for yellow. Valid for datatype color Yes No for $datatype string , integer , float , boolean . Yes for enum , color For example, our temperature property would send: homie / super - car / engine / temperature / $name \u2192 \"Engine temperature\" homie / super - car / engine / temperature / $settable \u2192 \"false\" homie / super - car / engine / temperature / $unit \u2192 \"\u00b0C\" homie / super - car / engine / temperature / $datatype \u2192 \"float\" homie / super - car / engine / temperature / $format \u2192 \"-20:120\" homie / super - car / engine / temperature \u2192 \"21.5\" homie / device ID / node ID / property ID / set : the device can subscribe to this topic if the property is settable from the controller, in case of actuators. Homie is state-based. You don't tell your smartlight to turn on , but you tell it to put its power state to on . This especially fits well with MQTT, because of retained message. For example, a kitchen-light device exposing a light node would subscribe to homie/kitchen-light/light/power/set and it would receive: homie / kitchen - light / light / power / set \u2190 \"true\" The device would then turn on the light, and update its power state. This provides pessimistic feedback, which is important for home automation. homie / kitchen - light / light / power \u2192 \"true\"","title":"Property Attributes"},{"location":"spec-core-v3_0_1/#arrays","text":"A node can be an array if you've added [] to its ID in the $nodes device attribute, and if its $array attribute is set to the range of the array. Let's consider we want to control independently the front lights and back lights of our super-car . Our lights node array would look like this. Note that the topic for an element of the array node is the name of the node followed by a _ and the index getting updated: homie / super - car / $nodes \u2192 \"lights[]\" homie / super - car / lights / $name \u2192 \"Lights\" homie / super - car / lights / $properties \u2192 \"intensity\" homie / super - car / lights / $array \u2192 \"0-1\" homie / super - car / lights / intensity / $name \u2192 \"Intensity\" homie / super - car / lights / intensity / $settable \u2192 \"true\" homie / super - car / lights / intensity / $unit \u2192 \"%\" homie / super - car / lights / intensity / $datatype \u2192 \"integer\" homie / super - car / lights / intensity / $format \u2192 \"0:100\" homie / super - car / lights_0 / $name \u2192 \"Back lights\" homie / super - car / lights_0 / intensity \u2192 \"0\" homie / super - car / lights_1 / $name \u2192 \"Front lights\" homie / super - car / lights_1 / intensity \u2192 \"100\" Note that you can name each element in your array individually (\"Back lights\", etc.).","title":"Arrays"},{"location":"spec-core-v3_0_1/#broadcast-channel","text":"Homie defines a broadcast channel, so a controller is able to broadcast a message to every Homie devices: homie / $broadcast / level : level is an arbitrary broadcast identifier. It must adhere to the ID format . For example, you might want to broadcast an alert event with the alert reason as the payload. Devices are then free to react or not. In our case, every buzzer of your home automation system would start buzzing. homie / $broadcast / alert \u2190 \"Intruder detected\" Any other topic is not part of the Homie convention.","title":"Broadcast Channel"},{"location":"spec-core-v3_0_1/#-","text":"","title":"----"},{"location":"z_license/","text":"License \u00b6 Creative Commons Attribution 4.0 International Public License \u00b6 By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 \u2013 Definitions. \u00b6 a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 \u2013 Scope. \u00b6 a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 \u2013 License Conditions. \u00b6 Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 \u2013 Sui Generis Database Rights. \u00b6 Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability. \u00b6 a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 \u2013 Term and Termination. \u00b6 a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 \u2013 Other Terms and Conditions. \u00b6 a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 \u2013 Interpretation. \u00b6 a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies , Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"License"},{"location":"z_license/#license","text":"","title":"License"},{"location":"z_license/#creative-commons-attribution-40-international-public-license","text":"By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.","title":"Creative Commons Attribution 4.0 International Public License"},{"location":"z_license/#section-1-definitions","text":"a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.","title":"Section 1 \u2013 Definitions."},{"location":"z_license/#section-2-scope","text":"a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.","title":"Section 2 \u2013 Scope."},{"location":"z_license/#section-3-license-conditions","text":"Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.","title":"Section 3 \u2013 License Conditions."},{"location":"z_license/#section-4-sui-generis-database-rights","text":"Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.","title":"Section 4 \u2013 Sui Generis Database Rights."},{"location":"z_license/#section-5-disclaimer-of-warranties-and-limitation-of-liability","text":"a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability."},{"location":"z_license/#section-6-term-and-termination","text":"a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.","title":"Section 6 \u2013 Term and Termination."},{"location":"z_license/#section-7-other-terms-and-conditions","text":"a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.","title":"Section 7 \u2013 Other Terms and Conditions."},{"location":"z_license/#section-8-interpretation","text":"a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies , Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"Section 8 \u2013 Interpretation."},{"location":"FAQ/","text":"FAQ \u00b6 In this section frequently asked questions will be answered. This includes design decisions and drawn compromises in the specifics of the Homie convention. How do I query/request a property? \u00b6 You don't. The MQTT protocol does not implement the request-reply but rather the publish-subscribe messaging pattern. The Homie convention follows the publish-subscribe principle by publishing data as retained messages on a regular basis. You might want to rethink the design of your application - in most scenarios a regularly updated information is sufficient. Workaround: You are free to implement your own ideas on top of the basic structure of the Homie convention. You could either implement a get getter topic and its logic to trigger a value update, or you may exploit the concept of Homie properties and define a settable property to trigger a value update. A discussion on the matter can be found in issue #79 . nav.md-nav { display: none !important; }","title":"FAQ"},{"location":"FAQ/#faq","text":"In this section frequently asked questions will be answered. This includes design decisions and drawn compromises in the specifics of the Homie convention.","title":"FAQ"},{"location":"FAQ/#how-do-i-queryrequest-a-property","text":"You don't. The MQTT protocol does not implement the request-reply but rather the publish-subscribe messaging pattern. The Homie convention follows the publish-subscribe principle by publishing data as retained messages on a regular basis. You might want to rethink the design of your application - in most scenarios a regularly updated information is sufficient. Workaround: You are free to implement your own ideas on top of the basic structure of the Homie convention. You could either implement a get getter topic and its logic to trigger a value update, or you may exploit the concept of Homie properties and define a settable property to trigger a value update. A discussion on the matter can be found in issue #79 . nav.md-nav { display: none !important; }","title":"How do I query/request a property?"},{"location":"Get_Involved/","text":"Get involved \u00b6 If you are missing a feature in the convention, something is unclear and requires better documentation or you have a better solution for a current feature, get involved. Open a new GitHub Issue to start a discussion about a new feature. Open a GitHub Pull Request to provide a change to the convention and have it discussed. The Homie Convention follows the rolling release model and is improved and released in short development cycles. Check the releases tab to learn about previous release versions. How is a new feature proposal handled? \u00b6 A new discussion/feature can be raised by a GitHub Issue or a Pull-Request. A Pull Request is preferred, as it allows to talk about a specific idea more easily. The discussion period for a new feature lasts for a maximum of 3 weeks. Everyone involved can apply for a longer time frame if required. 3 weeks no progress means \"Rejected\" automatically. Active maintainers list themselves in a MAINTAINER.md file. Everyone in that file is required to response within 3 weeks to a feature request. A maintainer can remove/add himself at any time to the mentioned file if workload/holiday will prevent him participating in a foreseeable future. All active maintainers MUST agree on a new feature for it to be added. An exception is the trivial case (spelling error, ...) in which a single maintainer is sufficient. nav.md-nav { display: none !important; }","title":"Get involved"},{"location":"Get_Involved/#get-involved","text":"If you are missing a feature in the convention, something is unclear and requires better documentation or you have a better solution for a current feature, get involved. Open a new GitHub Issue to start a discussion about a new feature. Open a GitHub Pull Request to provide a change to the convention and have it discussed. The Homie Convention follows the rolling release model and is improved and released in short development cycles. Check the releases tab to learn about previous release versions.","title":"Get involved"},{"location":"Get_Involved/#how-is-a-new-feature-proposal-handled","text":"A new discussion/feature can be raised by a GitHub Issue or a Pull-Request. A Pull Request is preferred, as it allows to talk about a specific idea more easily. The discussion period for a new feature lasts for a maximum of 3 weeks. Everyone involved can apply for a longer time frame if required. 3 weeks no progress means \"Rejected\" automatically. Active maintainers list themselves in a MAINTAINER.md file. Everyone in that file is required to response within 3 weeks to a feature request. A maintainer can remove/add himself at any time to the mentioned file if workload/holiday will prevent him participating in a foreseeable future. All active maintainers MUST agree on a new feature for it to be added. An exception is the trivial case (spelling error, ...) in which a single maintainer is sufficient. nav.md-nav { display: none !important; }","title":"How is a new feature proposal handled?"},{"location":"Implementations/","text":"Implementations \u00b6 The Homie convention differentiates between Devices and Controllers . Devices : An instance of a physical piece of hardware is called a device. For example, a car, an Arduino/ESP8266 or a coffee machine. It publishes Nodes and Properties to the MQTT broker. Controller : A controller is also a MQTT client for the broker, but does not publish anything but discovers and interacts with Devices. There can be more than one Controller connected to the same broker. Find implementations for Devices and Controllers in this section.","title":"Implementations"},{"location":"Implementations/#implementations","text":"The Homie convention differentiates between Devices and Controllers . Devices : An instance of a physical piece of hardware is called a device. For example, a car, an Arduino/ESP8266 or a coffee machine. It publishes Nodes and Properties to the MQTT broker. Controller : A controller is also a MQTT client for the broker, but does not publish anything but discovers and interacts with Devices. There can be more than one Controller connected to the same broker. Find implementations for Devices and Controllers in this section.","title":"Implementations"},{"location":"Implementations/controller_implementations/","text":"Libraries \u00b6 A library can be included in your own project to act as a Controller for Homie devices. Name Language Homie Version Website/Download Homie-Device Node JS 3.0 npmjs homie-cpp C++ 3.0 GitHub Administration \u00b6 Administrative tools usually allow you to detect, list and interact with Homie devices. Name Homie Download Implementation notes Hodmin 2.0 Website Home automation \u00b6 Home automation software in this list allows you to detect and interact with Homie devices and integrate them into your automation plan. Name Version Homie Download Implementation notes openHAB 2.4+ 3.0 Website No node instances HomeAssistant WIP 2.0 Website Module need to be installed into HA installation","title":"Controller implementations"},{"location":"Implementations/controller_implementations/#libraries","text":"A library can be included in your own project to act as a Controller for Homie devices. Name Language Homie Version Website/Download Homie-Device Node JS 3.0 npmjs homie-cpp C++ 3.0 GitHub","title":"Libraries"},{"location":"Implementations/controller_implementations/#administration","text":"Administrative tools usually allow you to detect, list and interact with Homie devices. Name Homie Download Implementation notes Hodmin 2.0 Website","title":"Administration"},{"location":"Implementations/controller_implementations/#home-automation","text":"Home automation software in this list allows you to detect and interact with Homie devices and integrate them into your automation plan. Name Version Homie Download Implementation notes openHAB 2.4+ 3.0 Website No node instances HomeAssistant WIP 2.0 Website Module need to be installed into HA installation","title":"Home automation"},{"location":"Implementations/device_implementations/","text":"Libraries \u00b6 A library can be included in your own project to act as a Homie device. Name Language Homie Version Website/Download Description homie-cpp C++ 3.0 GitHub Homie C++ header only library homie-python Python 2.1 GitHub homie-micropython \u00b5Python 2.0.1 GitHub WIP node-red-contrib-homie Node-Red 2.1 GitHub WIP homie-ESP32 C++ 2.0.1 GitHub An esp-idf component for the Homie convention. Firmware \u00b6 A full featured firmware, ready to be flashed on a supported device type. Name Language Homie Version Website/Download Description homie-esp8266 C++ 2.0.1 GitHub An Arduino for ESP8266 implementation of Homie, an MQTT convention for the IoT. Software projects \u00b6 A software application that speaks MQTT/Homie and acts as a Homie Device. Name Language Homie Version Website/Download Description miflora-mqtt-daemon Python 3.0 GitHub A linux daemon to fetch and publish data from Mi Flora plant sensors","title":"Device implementations"},{"location":"Implementations/device_implementations/#libraries","text":"A library can be included in your own project to act as a Homie device. Name Language Homie Version Website/Download Description homie-cpp C++ 3.0 GitHub Homie C++ header only library homie-python Python 2.1 GitHub homie-micropython \u00b5Python 2.0.1 GitHub WIP node-red-contrib-homie Node-Red 2.1 GitHub WIP homie-ESP32 C++ 2.0.1 GitHub An esp-idf component for the Homie convention.","title":"Libraries"},{"location":"Implementations/device_implementations/#firmware","text":"A full featured firmware, ready to be flashed on a supported device type. Name Language Homie Version Website/Download Description homie-esp8266 C++ 2.0.1 GitHub An Arduino for ESP8266 implementation of Homie, an MQTT convention for the IoT.","title":"Firmware"},{"location":"Implementations/device_implementations/#software-projects","text":"A software application that speaks MQTT/Homie and acts as a Homie Device. Name Language Homie Version Website/Download Description miflora-mqtt-daemon Python 3.0 GitHub A linux daemon to fetch and publish data from Mi Flora plant sensors","title":"Software projects"},{"location":"_Commercial_products/","text":"Commercial product \u00b6 If you want your commercial product to speak the Homie MQTT dialect, please fill in the contact form. Active maintainers will receive a message and assist you in getting your implementation right and answering any upcoming questions. E-Mail address Your name Submit nav.md-nav { display: none !important; } .partnerform fieldset { position: relative; border: none; } .partnerform label { position: absolute; top: 18px; color: rgba(0, 0, 0, 0.3); transform-origin: left; transition: all 0.3s ease; } .partnerform input:focus ~ label { color: red; } .partnerform input:focus ~ label, .partnerform input:valid ~ label { top: 0; transform: scale(0.6, 0.6); } .partnerform input { font-size: 20px; width: 100%; border: none; margin-top: 10px; } .partnerform input:focus { outline: none; } .partnerform .after { width: 100%; height: 2px; background: linear-gradient(to right, red 50%, transparent 50%); background-color: rgba(0, 0, 0, 0.3); background-size: 200% 100%; background-position: 100% 0; transition: all 0.6s ease; } .partnerform input:focus ~ .after { background-position: 0 0; } .partnerform button { position: relative; width: 100%; font-size: 20px; font-family: system-ui, Helvetica, Arial, sans-serif; line-height: 1.5; margin-top: 20px; padding: 2px 10px; color: rgba(0, 0, 0, 0.4); background: white; border: none; background: linear-gradient(to right, #3f51b5 50%, transparent 50%); background-color: rgba(0, 0, 0, 0.3); background-size: 200% 100%; background-position: 100% 0; transition: all 0.6s ease; } .partnerform button:before { position: absolute; content: \"Submit\"; top: 2px; bottom: 2px; left: 2px; right: 2px; display: block; background-color: white; } .partnerform button:active, .partnerform button:focus, .partnerform button:hover { outline: none; background-position: 0 0; color: #3f51b5; }","title":"Commercial product"},{"location":"_Commercial_products/#commercial-product","text":"If you want your commercial product to speak the Homie MQTT dialect, please fill in the contact form. Active maintainers will receive a message and assist you in getting your implementation right and answering any upcoming questions. E-Mail address Your name Submit nav.md-nav { display: none !important; } .partnerform fieldset { position: relative; border: none; } .partnerform label { position: absolute; top: 18px; color: rgba(0, 0, 0, 0.3); transform-origin: left; transition: all 0.3s ease; } .partnerform input:focus ~ label { color: red; } .partnerform input:focus ~ label, .partnerform input:valid ~ label { top: 0; transform: scale(0.6, 0.6); } .partnerform input { font-size: 20px; width: 100%; border: none; margin-top: 10px; } .partnerform input:focus { outline: none; } .partnerform .after { width: 100%; height: 2px; background: linear-gradient(to right, red 50%, transparent 50%); background-color: rgba(0, 0, 0, 0.3); background-size: 200% 100%; background-position: 100% 0; transition: all 0.6s ease; } .partnerform input:focus ~ .after { background-position: 0 0; } .partnerform button { position: relative; width: 100%; font-size: 20px; font-family: system-ui, Helvetica, Arial, sans-serif; line-height: 1.5; margin-top: 20px; padding: 2px 10px; color: rgba(0, 0, 0, 0.4); background: white; border: none; background: linear-gradient(to right, #3f51b5 50%, transparent 50%); background-color: rgba(0, 0, 0, 0.3); background-size: 200% 100%; background-position: 100% 0; transition: all 0.6s ease; } .partnerform button:before { position: absolute; content: \"Submit\"; top: 2px; bottom: 2px; left: 2px; right: 2px; display: block; background-color: white; } .partnerform button:active, .partnerform button:focus, .partnerform button:hover { outline: none; background-position: 0 0; color: #3f51b5; }","title":"Commercial product"}]}